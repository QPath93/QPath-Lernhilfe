<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title><%= hilfe.title %></title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

    body {
      font-family: 'Inter', sans-serif;
      margin: 0;
      padding: 0;
      transition: background 0.3s, color 0.3s;
    }

    /* Light Mode */
    body.light {
      background: linear-gradient(135deg, #e0e7ff, #f0f4ff);
      color: #333;
    }
    body.light .container {
      background: #fff;
      color: #333;
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
    }

    /* Dark Mode */
    body.dark {
      background: linear-gradient(135deg, #111827, #1f2937);
      color: #e5e7eb;
    }
    body.dark .container {
      background: #1f2937;
      color: #f3f4f6;
      box-shadow: 0 8px 20px rgba(0,0,0,0.4);
    }

    .container {
      max-width: 800px;
      margin: 40px auto;
      padding: 30px;
      border-radius: 12px;
      transition: background 0.3s, color 0.3s;
    }

    .logo {
      display: block;
      margin: 0 auto 15px;
      max-width: 160px;
    }

    h1 {
      text-align: center;
      margin-bottom: 20px;
      font-weight: 600;
    }

    .hilfe-item {
      margin-bottom: 20px;
      border-bottom: 1px solid #4b5563;
      padding-bottom: 10px;
    }

    .hilfe-header {
      font-size: 18px;
      font-weight: 600;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      border-radius: 8px;
      background: rgba(59,130,246,0.1);
      transition: background 0.2s;
    }
    .hilfe-header:hover {
      background: rgba(59,130,246,0.2);
    }

    .hilfe-content {
      display: none;
      margin-top: 10px;
    }

    .hilfe-image {
      max-width: 65%;
      margin-top: 10px;
      margin-bottom: 10px;
      display: block;
      margin-left: auto;
      margin-right: auto;
      border-radius: 8px;
    }

    .file-preview {
      display: flex;
      align-items: center;
      margin-top: 8px;
    }
    .file-icon {
      width: 28px;
      height: 28px;
      margin-right: 8px;
    }
    .file-preview a {
      text-decoration: none;
      color: #3b82f6;
      font-weight: 600;
      word-break: break-word;
    }
    .file-preview a:hover {
      text-decoration: underline;
    }

    .locked-info {
      color: #f87171;
      font-size: 14px;
      margin-top: 5px;
    }

    .theme-toggle {
      position: fixed;
      top: 15px;
      right: 15px;
      background: rgba(0,0,0,0.1);
      color: #fff;
      padding: 8px 12px;
      border-radius: 8px;
      font-size: 14px;
      cursor: pointer;
      transition: background 0.3s;
      backdrop-filter: blur(4px);
    }
    body.light .theme-toggle {
      background: rgba(0,0,0,0.1);
      color: #111;
    }
    body.dark .theme-toggle {
      background: rgba(255,255,255,0.1);
      color: #fff;
    }
    .theme-toggle:hover {
      background: rgba(0,0,0,0.2);
    }

    .arrow {
      display: inline-block;
      transition: transform 0.3s ease;
    }

    .arrow.rotated {
      transform: rotate(-90deg);
    }

    .unlock-error {
      color: #f87171;
      font-size: 13px;
      margin-top: 5px;
      display: none;
    }
  </style>
</head>
<body class="light">
  <!-- Darkmode Toggle -->
  <div class="theme-toggle" id="themeToggle">üåô Dark Mode</div>

  <div class="container">
    <img src="/logo.png" alt="Logo" class="logo">
<% if (user && user._id.toString() === hilfe.userId.toString()) { %>
  <div style="text-align: center; margin-bottom: 20px;">
    <a href="/dashboard" style="
      display: inline-block;
      padding: 10px 16px;
      border: 2px solid #3b82f6;
      border-radius: 8px;
      background: transparent;
      color: #3b82f6;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.3s ease;
    " onmouseover="this.style.background='#3b82f6'; this.style.color='white';"
       onmouseout="this.style.background='transparent'; this.style.color='#3b82f6';">
      ‚¨ÖÔ∏è Zur√ºck zum Dashboard
    </a>
  </div>
<% } %>
    <h1><%= hilfe.title %></h1>

    <% hilfe.hilfen.forEach((h, idx) => { %>
      <div class="hilfe-item" id="hilfe-<%= idx %>">
        <div class="hilfe-header" onclick="toggleHilfe(<%= idx %>)">
          <span>
            <%= h.name %>
            <% if (h.locked && !unlocked[idx]) { %> üîí <% } %>
          </span>
          <span class="arrow" id="arrow-<%= idx %>">‚óÄ</span>
        </div>

        <div class="hilfe-content" id="content-<%= idx %>">
          <% if (h.locked && !unlocked[idx]) { %>
            <div class="locked-content">
              <div class="locked-info">üîí Diese Hilfe ist gesperrt</div>
              <form class="unlock-form" action="/hilfe/<%= hilfe.id %>/unlock/<%= idx %>" method="POST">
                <input type="password" name="code" placeholder="Code eingeben">
                <button type="submit">Entsperren</button>
                <div class="unlock-error"></div>
              </form>
            </div>
            <div class="real-content" style="display:none;">
              <p><%= h.content %></p>
              <% if (h.files && h.files.length > 0) { 
                   const imageExtensions = /\.(png|jpe?g|gif|webp|bmp)$/;
                   const imageFiles = h.files.filter(f => (f.path && f.path.toLowerCase().match(imageExtensions)) || (f.original && f.original.toLowerCase().match(imageExtensions)));
                   const otherFiles = h.files.filter(f => !((f.path && f.path.toLowerCase().match(imageExtensions)) || (f.original && f.original.toLowerCase().match(imageExtensions))));
              %>
                <% imageFiles.forEach(file => { %>
                  <img src="/<%= file.path %>" alt="<%= file.original %>" class="hilfe-image">
                <% }) %>
                <% otherFiles.forEach(file => { 
                     const lower = file.original.toLowerCase();
                     const filename = file.original;
                     let icon = '/file-icon.png';
                     if (lower.endsWith('.pdf')) icon = '/pdf-icon.png';
                     else if (lower.endsWith('.doc') || lower.endsWith('.docx')) icon = '/word-icon.png';
                     else if (lower.endsWith('.xls') || lower.endsWith('.xlsx')) icon = '/excel-icon.png';
                     else if (lower.endsWith('.ppt') || lower.endsWith('.pptx')) icon = '/powerpoint-icon.png';
                     else if (lower.endsWith('.zip')) icon = '/zip-icon.png';
                %>
                  <div class="file-preview">
                    <img src="<%= icon %>" alt="Datei" class="file-icon">
                    <a href="/<%= file.path %>" target="_blank"><%= filename %></a>
                  </div>
                <% }) %>
              <% } %>
            </div>
          <% } else { %>
            <div class="real-content">
              <p><%= h.content %></p>
              <% if (h.files && h.files.length > 0) { 
                   const imageExtensions = /\.(png|jpe?g|gif|webp|bmp)$/;
                   const imageFiles = h.files.filter(f => (f.path && f.path.toLowerCase().match(imageExtensions)) || (f.original && f.original.toLowerCase().match(imageExtensions)));
                   const otherFiles = h.files.filter(f => !((f.path && f.path.toLowerCase().match(imageExtensions)) || (f.original && f.original.toLowerCase().match(imageExtensions))));
              %>
                <% imageFiles.forEach(file => { %>
                  <img src="/<%= file.path %>" alt="<%= file.original %>" class="hilfe-image">
                <% }) %>
                <% otherFiles.forEach(file => { 
                     const lower = file.original.toLowerCase();
                     const filename = file.original;
                     let icon = '/file-icon.png';
                     if (lower.endsWith('.pdf')) icon = '/pdf-icon.png';
                     else if (lower.endsWith('.doc') || lower.endsWith('.docx')) icon = '/word-icon.png';
                     else if (lower.endsWith('.xls') || lower.endsWith('.xlsx')) icon = '/excel-icon.png';
                     else if (lower.endsWith('.ppt') || lower.endsWith('.pptx')) icon = '/powerpoint-icon.png';
                     else if (lower.endsWith('.zip')) icon = '/zip-icon.png';
                %>
                  <div class="file-preview">
                    <img src="<%= icon %>" alt="Datei" class="file-icon">
                    <a href="/<%= file.path %>" target="_blank"><%= filename %></a>
                  </div>
                <% }) %>
              <% } %>
            </div>
          <% } %>
        </div>
      </div>
    <% }) %>
  </div>

  <script>
    // Auf- und Zuklappen der Hilfen
    function toggleHilfe(index) {
      const content = document.getElementById('content-' + index);
      const arrow = document.getElementById('arrow-' + index);

      if (content.style.display === 'block') {
        content.style.display = 'none';
        arrow.classList.remove('rotated');
      } else {
        content.style.display = 'block';
        arrow.classList.add('rotated');
      }
    }

    // Dark/Light Mode Toggle
    const themeToggle = document.getElementById('themeToggle');
    const body = document.body;

    if (localStorage.getItem('theme') === 'dark') {
      body.classList.remove('light');
      body.classList.add('dark');
      themeToggle.textContent = '‚òÄÔ∏è Light Mode';
    }

    themeToggle.addEventListener('click', () => {
      if (body.classList.contains('light')) {
        body.classList.remove('light');
        body.classList.add('dark');
        themeToggle.textContent = '‚òÄÔ∏è Light Mode';
        localStorage.setItem('theme', 'dark');
      } else {
        body.classList.remove('dark');
        body.classList.add('light');
        themeToggle.textContent = 'üåô Dark Mode';
        localStorage.setItem('theme', 'light');
      }
    });

    // ‚úÖ AJAX Unlock ohne Reload
    document.querySelectorAll('.unlock-form').forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const plain = new URLSearchParams(formData);

        const response = await fetch(form.action, {
          method: 'POST',
          body: plain,
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        });

        const data = await response.json();

        if (data.success) {
          data.unlockedIndices.forEach(idx => {
            const helpBox = document.querySelector(`#hilfe-${idx}`);
            if (!helpBox) return;

            const lockedContent = helpBox.querySelector('.locked-content');
            const realContent = helpBox.querySelector('.real-content');

            // üîì Schloss-Icon entfernen
            const header = document.querySelector(`#arrow-${idx}`).parentElement;
            header.innerHTML = header.innerHTML.replace('üîí','');

            if (lockedContent) lockedContent.style.display = 'none';
            if (realContent) realContent.style.display = 'block';
          });
        } else {
          const errorEl = form.querySelector('.unlock-error');
          if (errorEl) {
            errorEl.textContent = data.error;
            errorEl.style.display = 'block';
          } else {
            alert(data.error);
          }
        }
      });
    });
  </script>
</body>
</html>